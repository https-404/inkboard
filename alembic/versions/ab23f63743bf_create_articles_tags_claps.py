"""create articles tags claps

Revision ID: ab23f63743bf
Revises: 14c24a2aec47
Create Date: 2025-10-29 23:52:59.411696

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ab23f63743bf'
down_revision: Union[str, Sequence[str], None] = '14c24a2aec47'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable UUID extension if not already enabled
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tag'))
    )
    op.create_index(op.f('ix_tag_name'), 'tag', ['name'], unique=True)
    op.create_index(op.f('ix_tag_slug'), 'tag', ['slug'], unique=True)
    op.create_table('article',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('subtitle', sa.String(length=1000), nullable=True),
    sa.Column('slug', sa.String(length=500), nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('featured_image', sa.String(length=500), nullable=True),
    sa.Column('status', sa.String(length=20), server_default='draft', nullable=False),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reading_time', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('draft', 'published', 'archived')", name=op.f('ck_article_ck_article_status')),
    sa.ForeignKeyConstraint(['author_id'], ['user.id'], name=op.f('fk_article_author_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_article'))
    )
    op.create_index(op.f('ix_article_author_id'), 'article', ['author_id'], unique=False)
    op.create_index(op.f('ix_article_published_at'), 'article', ['published_at'], unique=False)
    op.create_index(op.f('ix_article_slug'), 'article', ['slug'], unique=True)
    op.create_index(op.f('ix_article_status'), 'article', ['status'], unique=False)
    op.create_index(op.f('ix_article_title'), 'article', ['title'], unique=False)
    op.create_table('article_tag',
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['article.id'], name=op.f('fk_article_tag_article_id_article'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], name=op.f('fk_article_tag_tag_id_tag'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('article_id', 'tag_id', name=op.f('pk_article_tag'))
    )
    op.create_table('clap',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('article_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('count', sa.Integer(), server_default='1', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['article.id'], name=op.f('fk_clap_article_id_article'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_clap_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_clap'))
    )
    op.create_index(op.f('ix_clap_article_id'), 'clap', ['article_id'], unique=False)
    op.create_index(op.f('ix_clap_user_id'), 'clap', ['user_id'], unique=False)
    op.create_index('uq_article_user_clap', 'clap', ['article_id', 'user_id'], unique=True)
    op.create_index(op.f('ix_otpcode_user_id'), 'otpcode', ['user_id'], unique=False)
    op.create_index('ix_token_user_expires', 'token', ['user_id', sa.literal_column('expires_at DESC')], unique=False)
    op.create_index(op.f('ix_token_user_id'), 'token', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_token_user_id'), table_name='token')
    op.drop_index('ix_token_user_expires', table_name='token')
    op.drop_index(op.f('ix_otpcode_user_id'), table_name='otpcode')
    op.drop_index('uq_article_user_clap', table_name='clap')
    op.drop_index(op.f('ix_clap_user_id'), table_name='clap')
    op.drop_index(op.f('ix_clap_article_id'), table_name='clap')
    op.drop_table('clap')
    op.drop_table('article_tag')
    op.drop_index(op.f('ix_article_title'), table_name='article')
    op.drop_index(op.f('ix_article_status'), table_name='article')
    op.drop_index(op.f('ix_article_slug'), table_name='article')
    op.drop_index(op.f('ix_article_published_at'), table_name='article')
    op.drop_index(op.f('ix_article_author_id'), table_name='article')
    op.drop_table('article')
    op.drop_index(op.f('ix_tag_slug'), table_name='tag')
    op.drop_index(op.f('ix_tag_name'), table_name='tag')
    op.drop_table('tag')
    # ### end Alembic commands ###
